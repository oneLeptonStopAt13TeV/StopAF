
#------------------------------------------------------------------------------

default: tables test_datacard

#------------------------------------------------------------------------------

ObjSuf        = o
SrcSuf        = C
ExeSuf        = run
LogSuf        = log

ROOTCFLAGS    = $(shell root-config --cflags)
ROOTLIBS      = $(shell root-config --libs) 

DEFINES       = -DSIGNAL_REGION_CUTS=$(SIGNAL_REGION_CUTS)
DEFINES      += -DSIGNAL_REGION_TAG=$(SIGNAL_REGION_TAG)

CXX           = g++
CXXFLAGS      = -std=c++0x
CXXFLAGS     += -O -Wall -fPIC $(DEFINES) -Wno-unused-result -Wshadow
CXXFLAGS     += $(ROOTCFLAGS) -I./
CXXFLAGS     += -I../../sonicScrewdriver/

LD            = g++ 
#LDFLAGS       = -g -O -Wall -fPIC -Wl,--no-undefined 
LDFLAGS       = -g  -Wall -fPIC -Wl,--no-undefined 
LDFLAGS      += $(ROOTLIBS)  -lEG -lTMVA 
LDFLAGS      += ../.vectorDictionnary_C.so 
LDFLAGS      += ../sonicScrewdriver/libSonicScrewdriver.so

SOFLAGS       = -shared
LIBS          =  

# Uncomment this line if you want to use a script to parse & colorize gcc output
# (You can also export this variable from your bashrc)
#GCCPARSER     = 2>&1 | python ~/littleScripts/colorGcc.py

#------------------------------------------------------------------------------

SOURCES       = $(wildcard *.$(SrcSuf))
OBJECTS       = $(SOURCES:.$(SrcSuf)=.$(ObjSuf))
EXECUTABLES   = $(SOURCES:.$(SrcSuf)=.$(ExeSuf))
LOGS          = $(SOURCES:.$(SrcSuf)=.$(LogSuf))

#------------------------------------------------------------------------------
#compile: ../../.vectorDictionnary_C.so $(TARGET).$(ExeSuf)

run:
	./$(TARGET).$(ExeSuf) | tee $(TARGET).$(LogSuf)

browse:
	export PLOTS_TO_BROWSE=`ls ../plots/$(shell basename `pwd`)/*.root`; root -l .browse

clean:
	@echo "Cleaning..."
	@rm -f *.$(ObjSuf) *.$(ExeSuf) *.$(LogSuf)
#include ../common/common.make

tables:
	@make --no-print-directory clean 
	@for REGION in $(SIGNAL_REGIONS); 		  \
	 do									      \
	        echo "[Lauching signal region $$REGION]";     \
	        make --quiet --no-print-directory compile TARGET=yieldTableProducer SIGNAL_REGION_CUTS=$$REGION SIGNAL_REGION_TAG=\\\"$$REGION\\\"; 	\
			mv yieldTableProducer.$(ExeSuf) yieldTableProducer_$$REGION.$(ExeSuf); \
			./yieldTableProducer_$$REGION.$(ExeSuf) ${ARG} > yieldTableProducer_$$REGION.$(LogSuf) & \
	done;
	@for REGION in $(SIGNAL_REGIONS); 	\
	do									\
		echo "Waiting for $$REGION";	\
		CHECK="nonEmpty";				\
		while [ "$$CHECK" != "" ];		\
		do								\
			sleep 1;					\
			CHECK=`ps kstart_time | grep yieldTableProducer_$$REGION.$(ExeSuf) | grep -v grep`;	\
		done;							\
	done;								\
	echo "Done";

#predictions: backgroundEstimation.$(ExeSuf)
#	@for REGION in $(SIGNAL_REGIONS);							\
#	 do															\
#	 	   echo "[Calculating prediction for $$REGION]";		\
#		   ./backgroundEstimation.$(ExeSuf) $$REGION $(ARG);	\
#	 done;



#test_datacard: test_datacard.$(ExeSuf)
#	./test_datacard.$(ExeSuf)

test_datacard.$(ExeSuf): test_datacard.C DataCardProducer.o
	$(CXX) $(CXXFLAGS) DataCardProducer.o $(LDFLAGS) -o $@ $< $(LIBS) $(GCCPARSER)


DataCardProducer.o: 
	$(CXX) $(CXXFLAGS) $(LDFLAGS) -c DataCardProducer.cc $(LIBS) $(GCCPARSER)
